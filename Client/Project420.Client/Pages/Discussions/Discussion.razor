@page "/Discussions/{Id}"
@using System.ComponentModel.DataAnnotations
@inherits InfinitePage<CommentModel>
@inject IApiService ApiService

@if (_discussion is null)
{
    <CenterProgressCircular />
}
else
{
    <MRow Id="container" Class="overflow-y-auto" Style="height:calc(100vh - 120px)" Justify="JustifyTypes.Center">
        <div class="d-flex flex-column pa-4" style="width:1200px; max-width:100%; row-gap:16px">
            <MCard Class="pa-4">
                <article>
                    <header>
                        <MCardTitle>
                            <h1 class="text-h4">@_discussion.Title</h1>
                        </MCardTitle>
                        <MCardSubtitle>
                            <MChipGroup>
                                <MChip>
                                    <MIcon Left="true">mdi-account</MIcon>
                                    @_discussion.Author
                                </MChip>
                                <MChip>
                                    <MIcon Left="true">mdi-gender-male-female</MIcon>
                                    @(_discussion.Gender switch
                                    {
                                        Gender.Male => "男",
                                        Gender.Female => "女",
                                        _ => "保密"
                                    })
                                </MChip>
                                <MChip>
                                    <MIcon Left="true">mdi-cake</MIcon>
                                    @_discussion.Age 岁
                                </MChip>
                                <MChip>
                                    <MIcon Left="true">mdi-clock</MIcon>
                                    @_discussion.CreatedTime?.LocalDateTime
                                </MChip>
                            </MChipGroup>
                        </MCardSubtitle>
                    </header>
                    <MCardText Class="text-body-1">
                        @((MarkupString)(_discussion.HtmlContent ?? ""))
                    </MCardText>
                </article>
            </MCard>
            <MCard Class="pa-4">
                <MCardTitle>
                    讨论
                </MCardTitle>
                <MCardSubtitle>
                    畅所欲言！
                </MCardSubtitle>
                <MCardText Class="text-body-1">
                    <AuthorizeView Context="authState">
                        <Authorized>
                            <MForm @ref="_form" Model="_model" OnValidSubmit="PublishComment">
                                <MTextarea Disabled="@_editDisabled" Class="mx-2" AutoGrow="true" Label="评论内容" @bind-Value="_model.Content"></MTextarea>
                                <div class="text-right">
                                    <MButton Disabled="@_editDisabled" Color="primary" Type="submit">发表评论</MButton>
                                </div>
                            </MForm>
                        </Authorized>
                        <NotAuthorized>
                            <div class="font-weight-bold">
                                <a href="Features/Authentication/Login">登录</a> 以参与讨论。
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                    <div class="d-flex flex-column mt-4" style="width:100%; row-gap:16px">
                        @foreach (var comment in _comments)
                        {
                            <MCard Outlined="true">
                                <article>
                                    <header>
                                        <MCardTitle>
                                            <MChipGroup>
                                                <MChip>
                                                    <MIcon Left="true">mdi-account</MIcon>
                                                    @comment.Author
                                                </MChip>
                                                <MChip>
                                                    <MIcon Left="true">mdi-clock</MIcon>
                                                    @comment.CreatedTime?.LocalDateTime
                                                </MChip>
                                            </MChipGroup>
                                        </MCardTitle>
                                    </header>
                                    <MCardText Class="mt-n4 text-body-1">
                                        @((MarkupString)(comment.HtmlContent ?? ""))
                                    </MCardText>
                                </article>
                            </MCard>
                        }
                    </div>
                </MCardText>
            </MCard>
            <MInfiniteScroll Threshold="5"
                         OnLoad="OnLoad"
                         Parent="#container">
            </MInfiniteScroll>
        </div>
        <MSnackbar @bind-Value="_published" Timeout="2000" Absolute="true" Bottom="true">
            评论已发表！
        </MSnackbar>
    </MRow>
}

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    [CascadingParameter]
    MainLayout Layout { get; set; } = null!;

    MForm? _form;
    FormModel _model = new();
    DiscussionModel? _discussion;
    List<CommentModel> _comments = new();

    bool _published = false;
    bool _editDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        Layout.Config = new("加载中", true, true);
        _discussion = await ApiService.GetDiscussionAsync(Id);
    }

    protected override void OnParametersSet()
    {
        if (_discussion is not null)
            Layout.Config = Layout.Config with { PageTitle = _discussion.Title ?? "讨论" };
    }

    protected override List<CommentModel> Items => _comments;

    protected override Task<IList<CommentModel>> LoadDataAsync() 
        => ApiService.GetCommentsAsync(Id, _comments.Count);

    async void PublishComment()
    {
        _editDisabled = true;
        await ApiService.AddCommentAsync(Id, _model.Content);
        _published = true;
        _form?.Reset();
        _editDisabled = false;
        await LoadDataAsync();
    }

    class FormModel
    {
        [Required(ErrorMessage = "内容是必需的。")]
        [MinLength(5, ErrorMessage = "内容过短，请输入有价值内容。")]
        public string Content { get; set; } = "";
    }
}
