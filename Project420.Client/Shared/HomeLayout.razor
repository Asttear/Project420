@using BlazorComponent.Web
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MApp>
    <Header />

    <MMain>
        <section style="background: url(image/bg-banner.jpg) no-repeat fixed; background-size: cover; min-height: 80vh">
            <div class="d-flex flex-column justify-space-around white--text" style="background-color: #0009; min-height: 80vh; padding:10%">
                <div class="d-flex flex-column flex-md-row align-center justify-space-around text-h2 text-sm-h1 font-weight-black">
                    <span class="py-4">无微不至</span><span class="py-4">为您服务</span>
                </div>
                <div class="align-self-center">
                    <MTextField TValue="string"
                                @bind-Value="_searchText"
                                AppendIcon="mdi-magnify"
                                OnAppendClick="Search"
                                Dark Outlined Clearable Style="width:70vw"
                                Label="搜索症状/医生/问题/资讯">
                    </MTextField>
                </div>
            </div>
        </section>
        <MContainer Fluid>
            <CascadingValue Value="this">
                @Body
            </CascadingValue>
        </MContainer>
    </MMain>

    <Footer />

    <FabTransition>
        <MButton Show="_showBackTop" Large Fixed Fab Style="z-index:6; bottom:24px; right:24px" Class="transition-swing" Color="primary" OnClick="ToTopAsync">
            <MIcon>mdi-chevron-up</MIcon>
        </MButton>
    </FabTransition>
</MApp>

@code {
    private string _searchText = "";
    private bool _showBackTop = false;

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.RemoveHtmlElementEventListener("window", "scroll");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JSRuntime.AddHtmlElementEventListener("window", "scroll", OnScroll, false, new EventListenerExtras(0, 100));
        }
    }

    private void Search()
    {

    }

    private async Task OnScroll()
    {
        var window = await JSRuntime.InvokeAsync<Window>(JsInteropConstants.GetWindow);
        var top = window.PageYOffset;

        bool newValue = top > 300;
        if (newValue != _showBackTop)
        {
            _showBackTop = newValue;
            StateHasChanged();
        }
    }

    private async Task ToTopAsync()
    {
        await JSRuntime.InvokeVoidAsync("backTop");
    }
}
